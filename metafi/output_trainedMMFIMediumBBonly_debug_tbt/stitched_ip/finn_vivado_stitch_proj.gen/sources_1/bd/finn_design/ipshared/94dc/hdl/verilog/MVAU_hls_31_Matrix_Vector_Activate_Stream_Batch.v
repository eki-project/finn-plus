// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module MVAU_hls_31_Matrix_Vector_Activate_Stream_Batch (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        in0_V_TVALID,
        weights_V_TVALID,
        out_V_TREADY,
        in0_V_TDATA,
        in0_V_TREADY,
        out_V_TDATA,
        out_V_TVALID,
        weights_V_TDATA,
        weights_V_TREADY
);

parameter    ap_ST_iter0_fsm_state1 = 1'd1;
parameter    ap_ST_iter1_fsm_state2 = 2'd2;
parameter    ap_ST_iter2_fsm_state3 = 2'd2;
parameter    ap_ST_iter3_fsm_state4 = 2'd2;
parameter    ap_ST_iter4_fsm_state5 = 2'd2;
parameter    ap_ST_iter1_fsm_state0 = 2'd1;
parameter    ap_ST_iter2_fsm_state0 = 2'd1;
parameter    ap_ST_iter3_fsm_state0 = 2'd1;
parameter    ap_ST_iter4_fsm_state0 = 2'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input   in0_V_TVALID;
input   weights_V_TVALID;
input   out_V_TREADY;
input  [7:0] in0_V_TDATA;
output   in0_V_TREADY;
output  [7:0] out_V_TDATA;
output   out_V_TVALID;
input  [7:0] weights_V_TDATA;
output   weights_V_TREADY;

reg ap_idle;
reg in0_V_TREADY;
reg out_V_TVALID;
reg weights_V_TREADY;

reg   [0:0] ap_CS_iter0_fsm;
wire    ap_CS_iter0_fsm_state1;
reg   [1:0] ap_CS_iter1_fsm;
wire    ap_CS_iter1_fsm_state0;
reg   [1:0] ap_CS_iter2_fsm;
wire    ap_CS_iter2_fsm_state0;
reg   [1:0] ap_CS_iter3_fsm;
wire    ap_CS_iter3_fsm_state0;
reg   [1:0] ap_CS_iter4_fsm;
wire    ap_CS_iter4_fsm_state0;
wire   [0:0] icmp_ln249_fu_120_p2;
reg    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_CS_iter1_fsm_state2;
reg   [0:0] icmp_ln249_reg_506;
reg   [0:0] icmp_ln249_reg_506_pp0_iter3_reg;
reg   [0:0] icmp_ln290_reg_535;
reg    ap_predicate_op102_write_state5;
reg    ap_block_state5_pp0_stage0_iter4;
reg    ap_block_state5_io;
wire    ap_CS_iter4_fsm_state5;
reg    ap_block_state4_pp0_stage0_iter3;
wire    ap_CS_iter3_fsm_state4;
reg    ap_block_state3_pp0_stage0_iter2;
wire    ap_CS_iter2_fsm_state3;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    in0_V_TDATA_blk_n;
reg    out_V_TDATA_blk_n;
reg    weights_V_TDATA_blk_n;
reg   [0:0] icmp_ln249_reg_506_pp0_iter1_reg;
reg   [0:0] icmp_ln249_reg_506_pp0_iter2_reg;
wire   [4:0] inElem_fu_132_p1;
reg  signed [4:0] inElem_reg_510;
wire   [2:0] W_packed_V_fu_136_p1;
reg   [2:0] W_packed_V_reg_515;
wire   [0:0] icmp_ln290_fu_177_p2;
reg   [31:0] sf_fu_76;
wire   [31:0] sf_1_fu_171_p2;
wire    ap_loop_init;
reg   [12:0] i_fu_80;
wire   [12:0] i_2_fu_126_p2;
reg   [12:0] ap_sig_allocacmp_i_1;
reg   [14:0] add_i4_i336_fu_84;
wire  signed [14:0] grp_fu_461_p3;
reg   [14:0] ap_sig_allocacmp_add_i4_i336_load;
wire   [0:0] icmp_ln272_fu_157_p2;
wire   [0:0] result_V_fu_193_p2;
wire   [0:0] icmp_ln1039_fu_202_p2;
wire   [0:0] icmp_ln1039_1_fu_211_p2;
wire   [0:0] icmp_ln1039_2_fu_220_p2;
wire   [0:0] icmp_ln1039_3_fu_229_p2;
wire   [0:0] icmp_ln1039_4_fu_238_p2;
wire   [0:0] icmp_ln1039_5_fu_247_p2;
wire   [0:0] icmp_ln1039_6_fu_256_p2;
wire   [0:0] icmp_ln1039_7_fu_265_p2;
wire   [0:0] icmp_ln1039_8_fu_274_p2;
wire   [0:0] icmp_ln1039_9_fu_283_p2;
wire   [0:0] icmp_ln1039_10_fu_292_p2;
wire   [0:0] icmp_ln1039_11_fu_301_p2;
wire   [0:0] icmp_ln1039_12_fu_310_p2;
wire   [0:0] icmp_ln1039_13_fu_319_p2;
wire   [1:0] zext_ln215_fu_198_p1;
wire   [1:0] zext_ln1039_1_fu_216_p1;
wire   [1:0] add_ln840_1_fu_328_p2;
wire   [1:0] zext_ln1039_fu_207_p1;
wire   [1:0] add_ln840_2_fu_334_p2;
wire   [1:0] zext_ln1039_2_fu_225_p1;
wire   [1:0] zext_ln1039_3_fu_234_p1;
wire   [1:0] add_ln840_3_fu_344_p2;
wire   [1:0] zext_ln1039_4_fu_243_p1;
wire   [1:0] zext_ln1039_5_fu_252_p1;
wire   [1:0] add_ln840_4_fu_354_p2;
wire   [2:0] zext_ln840_3_fu_360_p1;
wire   [2:0] zext_ln840_2_fu_350_p1;
wire   [2:0] add_ln840_5_fu_364_p2;
wire   [2:0] zext_ln840_1_fu_340_p1;
wire   [2:0] add_ln840_6_fu_370_p2;
wire   [1:0] zext_ln1039_6_fu_261_p1;
wire   [1:0] zext_ln1039_7_fu_270_p1;
wire   [1:0] add_ln840_7_fu_380_p2;
wire   [1:0] zext_ln1039_8_fu_279_p1;
wire   [1:0] zext_ln1039_9_fu_288_p1;
wire   [1:0] add_ln840_8_fu_390_p2;
wire   [2:0] zext_ln840_6_fu_396_p1;
wire   [2:0] zext_ln840_5_fu_386_p1;
wire   [2:0] add_ln840_9_fu_400_p2;
wire   [1:0] zext_ln1039_10_fu_297_p1;
wire   [1:0] zext_ln1039_11_fu_306_p1;
wire   [1:0] add_ln840_10_fu_410_p2;
wire   [1:0] zext_ln840_fu_324_p1;
wire   [1:0] zext_ln1039_12_fu_315_p1;
wire   [1:0] add_ln840_11_fu_420_p2;
wire   [2:0] zext_ln840_9_fu_426_p1;
wire   [2:0] zext_ln840_8_fu_416_p1;
wire   [2:0] add_ln840_12_fu_430_p2;
wire   [3:0] zext_ln840_10_fu_436_p1;
wire   [3:0] zext_ln840_7_fu_406_p1;
wire   [3:0] add_ln840_13_fu_440_p2;
wire   [3:0] zext_ln840_4_fu_376_p1;
wire   [3:0] result_V_2_fu_446_p2;
wire   [2:0] grp_fu_461_p1;
wire  signed [14:0] grp_fu_461_p2;
reg    grp_fu_461_ce;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg   [0:0] ap_NS_iter0_fsm;
reg   [1:0] ap_NS_iter1_fsm;
reg   [1:0] ap_NS_iter2_fsm;
reg   [1:0] ap_NS_iter3_fsm;
reg   [1:0] ap_NS_iter4_fsm;
reg    ap_ST_iter0_fsm_state1_blk;
wire    ap_ST_iter1_fsm_state2_blk;
reg    ap_ST_iter2_fsm_state3_blk;
reg    ap_ST_iter3_fsm_state4_blk;
reg    ap_ST_iter4_fsm_state5_blk;
wire    ap_start_int;
wire   [7:0] grp_fu_461_p10;
reg    ap_condition_532;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_iter0_fsm = 1'd1;
#0 ap_CS_iter1_fsm = 2'd1;
#0 ap_CS_iter2_fsm = 2'd1;
#0 ap_CS_iter3_fsm = 2'd1;
#0 ap_CS_iter4_fsm = 2'd1;
#0 ap_done_reg = 1'b0;
end

MVAU_hls_31_mac_muladd_5s_3ns_15s_15_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 5 ),
    .din1_WIDTH( 3 ),
    .din2_WIDTH( 15 ),
    .dout_WIDTH( 15 ))
mac_muladd_5s_3ns_15s_15_4_1_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(inElem_reg_510),
    .din1(grp_fu_461_p1),
    .din2(grp_fu_461_p2),
    .ce(grp_fu_461_ce),
    .dout(grp_fu_461_p3)
);

MVAU_hls_31_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter0_fsm <= ap_ST_iter0_fsm_state1;
    end else begin
        ap_CS_iter0_fsm <= ap_NS_iter0_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter1_fsm <= ap_ST_iter1_fsm_state0;
    end else begin
        ap_CS_iter1_fsm <= ap_NS_iter1_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter2_fsm <= ap_ST_iter2_fsm_state0;
    end else begin
        ap_CS_iter2_fsm <= ap_NS_iter2_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter3_fsm <= ap_ST_iter3_fsm_state0;
    end else begin
        ap_CS_iter3_fsm <= ap_NS_iter3_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter4_fsm <= ap_ST_iter4_fsm_state0;
    end else begin
        ap_CS_iter4_fsm <= ap_NS_iter4_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((~((1'b1 == ap_block_state5_io) | ((ap_predicate_op102_write_state5 == 1'b1) & (out_V_TREADY == 1'b0))) & (1'b1 == ap_CS_iter4_fsm_state5) & (ap_loop_exit_ready_pp0_iter4_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state5_io) | ((ap_predicate_op102_write_state5 == 1'b1) & (out_V_TREADY == 1'b0))) & (1'b1 == ap_CS_iter4_fsm_state5) & (ap_loop_exit_ready_pp0_iter3_reg == 1'b0))) begin
        ap_loop_exit_ready_pp0_iter4_reg <= 1'b0;
    end else if ((~((1'b1 == ap_CS_iter4_fsm_state5) & ((1'b1 == ap_block_state5_io) | ((ap_predicate_op102_write_state5 == 1'b1) & (out_V_TREADY == 1'b0)))) & (1'b1 == ap_CS_iter3_fsm_state4))) begin
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_532)) begin
        if ((icmp_ln249_fu_120_p2 == 1'd0)) begin
            i_fu_80 <= i_2_fu_126_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_80 <= 13'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((~((ap_start_int == 1'b0) | ((1'b1 == ap_CS_iter4_fsm_state5) & ((1'b1 == ap_block_state5_io) | ((ap_predicate_op102_write_state5 == 1'b1) & (out_V_TREADY == 1'b0)))) | ((weights_V_TVALID == 1'b0) & (icmp_ln249_fu_120_p2 == 1'd0)) | ((icmp_ln249_fu_120_p2 == 1'd0) & (in0_V_TVALID == 1'b0))) & (1'b1 == ap_CS_iter0_fsm_state1) & (ap_loop_init == 1'b1)) | (~((1'b1 == ap_CS_iter4_fsm_state5) & ((1'b1 == ap_block_state5_io) | ((ap_predicate_op102_write_state5 == 1'b1) & (out_V_TREADY == 1'b0)))) & (1'b1 == ap_CS_iter3_fsm_state4) & (icmp_ln290_fu_177_p2 == 1'd1) & (icmp_ln249_reg_506_pp0_iter2_reg == 1'd0)))) begin
        sf_fu_76 <= 32'd0;
    end else if ((~((1'b1 == ap_CS_iter4_fsm_state5) & ((1'b1 == ap_block_state5_io) | ((ap_predicate_op102_write_state5 == 1'b1) & (out_V_TREADY == 1'b0)))) & (1'b1 == ap_CS_iter3_fsm_state4) & (icmp_ln290_fu_177_p2 == 1'd0) & (icmp_ln249_reg_506_pp0_iter2_reg == 1'd0))) begin
        sf_fu_76 <= sf_1_fu_171_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_start_int == 1'b0) | ((1'b1 == ap_CS_iter4_fsm_state5) & ((1'b1 == ap_block_state5_io) | ((ap_predicate_op102_write_state5 == 1'b1) & (out_V_TREADY == 1'b0)))) | ((weights_V_TVALID == 1'b0) & (icmp_ln249_fu_120_p2 == 1'd0)) | ((icmp_ln249_fu_120_p2 == 1'd0) & (in0_V_TVALID == 1'b0))) & (1'b1 == ap_CS_iter0_fsm_state1) & (icmp_ln249_fu_120_p2 == 1'd0))) begin
        W_packed_V_reg_515 <= W_packed_V_fu_136_p1;
        inElem_reg_510 <= inElem_fu_132_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state5_io) | ((ap_predicate_op102_write_state5 == 1'b1) & (out_V_TREADY == 1'b0))) & (icmp_ln249_reg_506_pp0_iter3_reg == 1'd0) & (1'b1 == ap_CS_iter4_fsm_state5))) begin
        add_i4_i336_fu_84 <= grp_fu_461_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_start_int == 1'b0) | ((1'b1 == ap_CS_iter4_fsm_state5) & ((1'b1 == ap_block_state5_io) | ((ap_predicate_op102_write_state5 == 1'b1) & (out_V_TREADY == 1'b0)))) | ((weights_V_TVALID == 1'b0) & (icmp_ln249_fu_120_p2 == 1'd0)) | ((icmp_ln249_fu_120_p2 == 1'd0) & (in0_V_TVALID == 1'b0))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        icmp_ln249_reg_506 <= icmp_ln249_fu_120_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_CS_iter4_fsm_state5) & ((1'b1 == ap_block_state5_io) | ((ap_predicate_op102_write_state5 == 1'b1) & (out_V_TREADY == 1'b0)))) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        icmp_ln249_reg_506_pp0_iter1_reg <= icmp_ln249_reg_506;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_CS_iter4_fsm_state5) & ((1'b1 == ap_block_state5_io) | ((ap_predicate_op102_write_state5 == 1'b1) & (out_V_TREADY == 1'b0)))) & (1'b1 == ap_CS_iter2_fsm_state3))) begin
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        icmp_ln249_reg_506_pp0_iter2_reg <= icmp_ln249_reg_506_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_CS_iter4_fsm_state5) & ((1'b1 == ap_block_state5_io) | ((ap_predicate_op102_write_state5 == 1'b1) & (out_V_TREADY == 1'b0)))) & (1'b1 == ap_CS_iter3_fsm_state4))) begin
        icmp_ln249_reg_506_pp0_iter3_reg <= icmp_ln249_reg_506_pp0_iter2_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_CS_iter4_fsm_state5) & ((1'b1 == ap_block_state5_io) | ((ap_predicate_op102_write_state5 == 1'b1) & (out_V_TREADY == 1'b0)))) & (1'b1 == ap_CS_iter3_fsm_state4) & (icmp_ln249_reg_506_pp0_iter2_reg == 1'd0))) begin
        icmp_ln290_reg_535 <= icmp_ln290_fu_177_p2;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) | ((weights_V_TVALID == 1'b0) & (icmp_ln249_fu_120_p2 == 1'd0)) | ((icmp_ln249_fu_120_p2 == 1'd0) & (in0_V_TVALID == 1'b0)))) begin
        ap_ST_iter0_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_iter0_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_iter1_fsm_state2_blk = 1'b0;

always @ (*) begin
    if (((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_CS_iter3_fsm_state4) & ((1'b1 == ap_block_state5_io) | ((ap_predicate_op102_write_state5 == 1'b1) & (out_V_TREADY == 1'b0))))) begin
        ap_ST_iter2_fsm_state3_blk = 1'b1;
    end else begin
        ap_ST_iter2_fsm_state3_blk = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter4_fsm_state5) & ((1'b1 == ap_block_state5_io) | ((ap_predicate_op102_write_state5 == 1'b1) & (out_V_TREADY == 1'b0))))) begin
        ap_ST_iter3_fsm_state4_blk = 1'b1;
    end else begin
        ap_ST_iter3_fsm_state4_blk = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_block_state5_io) | ((ap_predicate_op102_write_state5 == 1'b1) & (out_V_TREADY == 1'b0)))) begin
        ap_ST_iter4_fsm_state5_blk = 1'b1;
    end else begin
        ap_ST_iter4_fsm_state5_blk = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start_int == 1'b0) | ((1'b1 == ap_CS_iter4_fsm_state5) & ((1'b1 == ap_block_state5_io) | ((ap_predicate_op102_write_state5 == 1'b1) & (out_V_TREADY == 1'b0)))) | ((weights_V_TVALID == 1'b0) & (icmp_ln249_fu_120_p2 == 1'd0)) | ((icmp_ln249_fu_120_p2 == 1'd0) & (in0_V_TVALID == 1'b0))) & (1'b1 == ap_CS_iter0_fsm_state1) & (icmp_ln249_fu_120_p2 == 1'd1))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state5_io) | ((ap_predicate_op102_write_state5 == 1'b1) & (out_V_TREADY == 1'b0))) & (1'b1 == ap_CS_iter4_fsm_state5) & (ap_loop_exit_ready_pp0_iter4_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter4_fsm_state0) & (1'b1 == ap_CS_iter3_fsm_state0) & (1'b1 == ap_CS_iter2_fsm_state0) & (1'b1 == ap_CS_iter1_fsm_state0) & (1'b1 == ap_CS_iter0_fsm_state1) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start_int == 1'b0) | ((1'b1 == ap_CS_iter4_fsm_state5) & ((1'b1 == ap_block_state5_io) | ((ap_predicate_op102_write_state5 == 1'b1) & (out_V_TREADY == 1'b0)))) | ((weights_V_TVALID == 1'b0) & (icmp_ln249_fu_120_p2 == 1'd0)) | ((icmp_ln249_fu_120_p2 == 1'd0) & (in0_V_TVALID == 1'b0))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln249_reg_506_pp0_iter3_reg == 1'd0) & (1'b1 == ap_CS_iter4_fsm_state5))) begin
        ap_sig_allocacmp_add_i4_i336_load = grp_fu_461_p3;
    end else begin
        ap_sig_allocacmp_add_i4_i336_load = add_i4_i336_fu_84;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter0_fsm_state1) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_i_1 = 13'd0;
    end else begin
        ap_sig_allocacmp_i_1 = i_fu_80;
    end
end

always @ (*) begin
    if (((~((1'b1 == ap_block_state5_io) | ((ap_predicate_op102_write_state5 == 1'b1) & (out_V_TREADY == 1'b0))) & (1'b1 == ap_CS_iter4_fsm_state5)) | (~((1'b1 == ap_CS_iter4_fsm_state5) & ((1'b1 == ap_block_state5_io) | ((ap_predicate_op102_write_state5 == 1'b1) & (out_V_TREADY == 1'b0)))) & (1'b1 == ap_CS_iter1_fsm_state2)) | (~((1'b1 == ap_CS_iter4_fsm_state5) & ((1'b1 == ap_block_state5_io) | ((ap_predicate_op102_write_state5 == 1'b1) & (out_V_TREADY == 1'b0)))) & (1'b1 == ap_CS_iter2_fsm_state3)) | (~((1'b1 == ap_CS_iter4_fsm_state5) & ((1'b1 == ap_block_state5_io) | ((ap_predicate_op102_write_state5 == 1'b1) & (out_V_TREADY == 1'b0)))) & (1'b1 == ap_CS_iter3_fsm_state4)))) begin
        grp_fu_461_ce = 1'b1;
    end else begin
        grp_fu_461_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter0_fsm_state1) & (icmp_ln249_fu_120_p2 == 1'd0) & (ap_start_int == 1'b1))) begin
        in0_V_TDATA_blk_n = in0_V_TVALID;
    end else begin
        in0_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start_int == 1'b0) | ((1'b1 == ap_CS_iter4_fsm_state5) & ((1'b1 == ap_block_state5_io) | ((ap_predicate_op102_write_state5 == 1'b1) & (out_V_TREADY == 1'b0)))) | ((weights_V_TVALID == 1'b0) & (icmp_ln249_fu_120_p2 == 1'd0)) | ((icmp_ln249_fu_120_p2 == 1'd0) & (in0_V_TVALID == 1'b0))) & (1'b1 == ap_CS_iter0_fsm_state1) & (icmp_ln249_fu_120_p2 == 1'd0))) begin
        in0_V_TREADY = 1'b1;
    end else begin
        in0_V_TREADY = 1'b0;
    end
end

always @ (*) begin
    if (((ap_predicate_op102_write_state5 == 1'b1) & (1'b1 == ap_CS_iter4_fsm_state5))) begin
        out_V_TDATA_blk_n = out_V_TREADY;
    end else begin
        out_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state5_io) | ((ap_predicate_op102_write_state5 == 1'b1) & (out_V_TREADY == 1'b0))) & (ap_predicate_op102_write_state5 == 1'b1) & (1'b1 == ap_CS_iter4_fsm_state5))) begin
        out_V_TVALID = 1'b1;
    end else begin
        out_V_TVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter0_fsm_state1) & (icmp_ln249_fu_120_p2 == 1'd0) & (ap_start_int == 1'b1))) begin
        weights_V_TDATA_blk_n = weights_V_TVALID;
    end else begin
        weights_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start_int == 1'b0) | ((1'b1 == ap_CS_iter4_fsm_state5) & ((1'b1 == ap_block_state5_io) | ((ap_predicate_op102_write_state5 == 1'b1) & (out_V_TREADY == 1'b0)))) | ((weights_V_TVALID == 1'b0) & (icmp_ln249_fu_120_p2 == 1'd0)) | ((icmp_ln249_fu_120_p2 == 1'd0) & (in0_V_TVALID == 1'b0))) & (1'b1 == ap_CS_iter0_fsm_state1) & (icmp_ln249_fu_120_p2 == 1'd0))) begin
        weights_V_TREADY = 1'b1;
    end else begin
        weights_V_TREADY = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_iter0_fsm)
        ap_ST_iter0_fsm_state1 : begin
            ap_NS_iter0_fsm = ap_ST_iter0_fsm_state1;
        end
        default : begin
            ap_NS_iter0_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter1_fsm)
        ap_ST_iter1_fsm_state2 : begin
            if ((~((1'b1 == ap_CS_iter4_fsm_state5) & ((1'b1 == ap_block_state5_io) | ((ap_predicate_op102_write_state5 == 1'b1) & (out_V_TREADY == 1'b0)))) & ~((ap_start_int == 1'b0) | ((weights_V_TVALID == 1'b0) & (icmp_ln249_fu_120_p2 == 1'd0)) | ((icmp_ln249_fu_120_p2 == 1'd0) & (in0_V_TVALID == 1'b0))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end else if ((~((1'b1 == ap_CS_iter4_fsm_state5) & ((1'b1 == ap_block_state5_io) | ((ap_predicate_op102_write_state5 == 1'b1) & (out_V_TREADY == 1'b0)))) & ((1'b0 == ap_CS_iter0_fsm_state1) | ((1'b1 == ap_CS_iter0_fsm_state1) & ((ap_start_int == 1'b0) | ((weights_V_TVALID == 1'b0) & (icmp_ln249_fu_120_p2 == 1'd0)) | ((icmp_ln249_fu_120_p2 == 1'd0) & (in0_V_TVALID == 1'b0))))))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state0;
            end else begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end
        end
        ap_ST_iter1_fsm_state0 : begin
            if ((~((ap_start_int == 1'b0) | ((1'b1 == ap_CS_iter4_fsm_state5) & ((1'b1 == ap_block_state5_io) | ((ap_predicate_op102_write_state5 == 1'b1) & (out_V_TREADY == 1'b0)))) | ((weights_V_TVALID == 1'b0) & (icmp_ln249_fu_120_p2 == 1'd0)) | ((icmp_ln249_fu_120_p2 == 1'd0) & (in0_V_TVALID == 1'b0))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end else begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter1_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter2_fsm)
        ap_ST_iter2_fsm_state3 : begin
            if ((~((1'b1 == ap_CS_iter4_fsm_state5) & ((1'b1 == ap_block_state5_io) | ((ap_predicate_op102_write_state5 == 1'b1) & (out_V_TREADY == 1'b0)))) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state3;
            end else if ((~((1'b1 == ap_CS_iter4_fsm_state5) & ((1'b1 == ap_block_state5_io) | ((ap_predicate_op102_write_state5 == 1'b1) & (out_V_TREADY == 1'b0)))) & (1'b0 == ap_CS_iter1_fsm_state2))) begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state0;
            end else begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state3;
            end
        end
        ap_ST_iter2_fsm_state0 : begin
            if ((~((1'b1 == ap_CS_iter4_fsm_state5) & ((1'b1 == ap_block_state5_io) | ((ap_predicate_op102_write_state5 == 1'b1) & (out_V_TREADY == 1'b0)))) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state3;
            end else begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter2_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter3_fsm)
        ap_ST_iter3_fsm_state4 : begin
            if ((~((1'b1 == ap_CS_iter4_fsm_state5) & ((1'b1 == ap_block_state5_io) | ((ap_predicate_op102_write_state5 == 1'b1) & (out_V_TREADY == 1'b0)))) & ~((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_CS_iter3_fsm_state4) & ((1'b1 == ap_block_state5_io) | ((ap_predicate_op102_write_state5 == 1'b1) & (out_V_TREADY == 1'b0)))) & (1'b1 == ap_CS_iter2_fsm_state3))) begin
                ap_NS_iter3_fsm = ap_ST_iter3_fsm_state4;
            end else if ((~((1'b1 == ap_CS_iter4_fsm_state5) & ((1'b1 == ap_block_state5_io) | ((ap_predicate_op102_write_state5 == 1'b1) & (out_V_TREADY == 1'b0)))) & ((1'b0 == ap_CS_iter2_fsm_state3) | ((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_CS_iter3_fsm_state4) & ((1'b1 == ap_block_state5_io) | ((ap_predicate_op102_write_state5 == 1'b1) & (out_V_TREADY == 1'b0))))))) begin
                ap_NS_iter3_fsm = ap_ST_iter3_fsm_state0;
            end else begin
                ap_NS_iter3_fsm = ap_ST_iter3_fsm_state4;
            end
        end
        ap_ST_iter3_fsm_state0 : begin
            if ((~((1'b1 == ap_CS_iter4_fsm_state5) & ((1'b1 == ap_block_state5_io) | ((ap_predicate_op102_write_state5 == 1'b1) & (out_V_TREADY == 1'b0)))) & (1'b1 == ap_CS_iter2_fsm_state3))) begin
                ap_NS_iter3_fsm = ap_ST_iter3_fsm_state4;
            end else begin
                ap_NS_iter3_fsm = ap_ST_iter3_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter3_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter4_fsm)
        ap_ST_iter4_fsm_state5 : begin
            if ((~((1'b1 == ap_block_state5_io) | ((ap_predicate_op102_write_state5 == 1'b1) & (out_V_TREADY == 1'b0))) & ((1'b0 == ap_CS_iter3_fsm_state4) | ((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_CS_iter3_fsm_state4) & ((1'b1 == ap_block_state5_io) | ((ap_predicate_op102_write_state5 == 1'b1) & (out_V_TREADY == 1'b0))))))) begin
                ap_NS_iter4_fsm = ap_ST_iter4_fsm_state0;
            end else if (((~((1'b1 == ap_block_state5_io) | ((ap_predicate_op102_write_state5 == 1'b1) & (out_V_TREADY == 1'b0))) & (icmp_ln249_reg_506_pp0_iter3_reg == 1'd1) & (1'b1 == ap_CS_iter4_fsm_state5)) | (~((1'b1 == ap_CS_iter4_fsm_state5) & ((1'b1 == ap_block_state5_io) | ((ap_predicate_op102_write_state5 == 1'b1) & (out_V_TREADY == 1'b0)))) & ~((1'b1 == ap_block_state5_io) | ((ap_predicate_op102_write_state5 == 1'b1) & (out_V_TREADY == 1'b0))) & (1'b1 == ap_CS_iter3_fsm_state4)))) begin
                ap_NS_iter4_fsm = ap_ST_iter4_fsm_state5;
            end else begin
                ap_NS_iter4_fsm = ap_ST_iter4_fsm_state5;
            end
        end
        ap_ST_iter4_fsm_state0 : begin
            if ((~((1'b1 == ap_CS_iter4_fsm_state5) & ((1'b1 == ap_block_state5_io) | ((ap_predicate_op102_write_state5 == 1'b1) & (out_V_TREADY == 1'b0)))) & (1'b1 == ap_CS_iter3_fsm_state4))) begin
                ap_NS_iter4_fsm = ap_ST_iter4_fsm_state5;
            end else begin
                ap_NS_iter4_fsm = ap_ST_iter4_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter4_fsm = 'bx;
        end
    endcase
end

assign W_packed_V_fu_136_p1 = weights_V_TDATA[2:0];

assign add_ln840_10_fu_410_p2 = (zext_ln1039_10_fu_297_p1 + zext_ln1039_11_fu_306_p1);

assign add_ln840_11_fu_420_p2 = (zext_ln840_fu_324_p1 + zext_ln1039_12_fu_315_p1);

assign add_ln840_12_fu_430_p2 = (zext_ln840_9_fu_426_p1 + zext_ln840_8_fu_416_p1);

assign add_ln840_13_fu_440_p2 = (zext_ln840_10_fu_436_p1 + zext_ln840_7_fu_406_p1);

assign add_ln840_1_fu_328_p2 = (zext_ln215_fu_198_p1 + zext_ln1039_1_fu_216_p1);

assign add_ln840_2_fu_334_p2 = (add_ln840_1_fu_328_p2 + zext_ln1039_fu_207_p1);

assign add_ln840_3_fu_344_p2 = (zext_ln1039_2_fu_225_p1 + zext_ln1039_3_fu_234_p1);

assign add_ln840_4_fu_354_p2 = (zext_ln1039_4_fu_243_p1 + zext_ln1039_5_fu_252_p1);

assign add_ln840_5_fu_364_p2 = (zext_ln840_3_fu_360_p1 + zext_ln840_2_fu_350_p1);

assign add_ln840_6_fu_370_p2 = (add_ln840_5_fu_364_p2 + zext_ln840_1_fu_340_p1);

assign add_ln840_7_fu_380_p2 = (zext_ln1039_6_fu_261_p1 + zext_ln1039_7_fu_270_p1);

assign add_ln840_8_fu_390_p2 = (zext_ln1039_8_fu_279_p1 + zext_ln1039_9_fu_288_p1);

assign add_ln840_9_fu_400_p2 = (zext_ln840_6_fu_396_p1 + zext_ln840_5_fu_386_p1);

assign ap_CS_iter0_fsm_state1 = ap_CS_iter0_fsm[32'd0];

assign ap_CS_iter1_fsm_state0 = ap_CS_iter1_fsm[32'd0];

assign ap_CS_iter1_fsm_state2 = ap_CS_iter1_fsm[32'd1];

assign ap_CS_iter2_fsm_state0 = ap_CS_iter2_fsm[32'd0];

assign ap_CS_iter2_fsm_state3 = ap_CS_iter2_fsm[32'd1];

assign ap_CS_iter3_fsm_state0 = ap_CS_iter3_fsm[32'd0];

assign ap_CS_iter3_fsm_state4 = ap_CS_iter3_fsm[32'd1];

assign ap_CS_iter4_fsm_state0 = ap_CS_iter4_fsm[32'd0];

assign ap_CS_iter4_fsm_state5 = ap_CS_iter4_fsm[32'd1];

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = ((ap_start_int == 1'b0) | ((weights_V_TVALID == 1'b0) & (icmp_ln249_fu_120_p2 == 1'd0)) | ((icmp_ln249_fu_120_p2 == 1'd0) & (in0_V_TVALID == 1'b0)));
end

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage0_iter2 = ((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_CS_iter3_fsm_state4) & ((1'b1 == ap_block_state5_io) | ((ap_predicate_op102_write_state5 == 1'b1) & (out_V_TREADY == 1'b0))));
end

always @ (*) begin
    ap_block_state4_pp0_stage0_iter3 = ((1'b1 == ap_CS_iter4_fsm_state5) & ((1'b1 == ap_block_state5_io) | ((ap_predicate_op102_write_state5 == 1'b1) & (out_V_TREADY == 1'b0))));
end

always @ (*) begin
    ap_block_state5_io = ((ap_predicate_op102_write_state5 == 1'b1) & (out_V_TREADY == 1'b0));
end

always @ (*) begin
    ap_block_state5_pp0_stage0_iter4 = ((ap_predicate_op102_write_state5 == 1'b1) & (out_V_TREADY == 1'b0));
end

always @ (*) begin
    ap_condition_532 = (~((ap_start_int == 1'b0) | ((1'b1 == ap_CS_iter4_fsm_state5) & ((1'b1 == ap_block_state5_io) | ((ap_predicate_op102_write_state5 == 1'b1) & (out_V_TREADY == 1'b0)))) | ((weights_V_TVALID == 1'b0) & (icmp_ln249_fu_120_p2 == 1'd0)) | ((icmp_ln249_fu_120_p2 == 1'd0) & (in0_V_TVALID == 1'b0))) & (1'b1 == ap_CS_iter0_fsm_state1));
end

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

always @ (*) begin
    ap_predicate_op102_write_state5 = ((icmp_ln290_reg_535 == 1'd1) & (icmp_ln249_reg_506_pp0_iter3_reg == 1'd0));
end

assign grp_fu_461_p1 = grp_fu_461_p10;

assign grp_fu_461_p10 = W_packed_V_reg_515;

assign grp_fu_461_p2 = ((icmp_ln272_fu_157_p2[0:0] == 1'b1) ? 15'd0 : ap_sig_allocacmp_add_i4_i336_load);

assign i_2_fu_126_p2 = (ap_sig_allocacmp_i_1 + 13'd1);

assign icmp_ln1039_10_fu_292_p2 = (($signed(grp_fu_461_p3) > $signed(15'd796)) ? 1'b1 : 1'b0);

assign icmp_ln1039_11_fu_301_p2 = (($signed(grp_fu_461_p3) > $signed(15'd865)) ? 1'b1 : 1'b0);

assign icmp_ln1039_12_fu_310_p2 = (($signed(grp_fu_461_p3) > $signed(15'd935)) ? 1'b1 : 1'b0);

assign icmp_ln1039_13_fu_319_p2 = (($signed(grp_fu_461_p3) > $signed(15'd1004)) ? 1'b1 : 1'b0);

assign icmp_ln1039_1_fu_211_p2 = (($signed(grp_fu_461_p3) > $signed(15'd172)) ? 1'b1 : 1'b0);

assign icmp_ln1039_2_fu_220_p2 = (($signed(grp_fu_461_p3) > $signed(15'd241)) ? 1'b1 : 1'b0);

assign icmp_ln1039_3_fu_229_p2 = (($signed(grp_fu_461_p3) > $signed(15'd311)) ? 1'b1 : 1'b0);

assign icmp_ln1039_4_fu_238_p2 = (($signed(grp_fu_461_p3) > $signed(15'd380)) ? 1'b1 : 1'b0);

assign icmp_ln1039_5_fu_247_p2 = (($signed(grp_fu_461_p3) > $signed(15'd449)) ? 1'b1 : 1'b0);

assign icmp_ln1039_6_fu_256_p2 = (($signed(grp_fu_461_p3) > $signed(15'd519)) ? 1'b1 : 1'b0);

assign icmp_ln1039_7_fu_265_p2 = (($signed(grp_fu_461_p3) > $signed(15'd588)) ? 1'b1 : 1'b0);

assign icmp_ln1039_8_fu_274_p2 = (($signed(grp_fu_461_p3) > $signed(15'd657)) ? 1'b1 : 1'b0);

assign icmp_ln1039_9_fu_283_p2 = (($signed(grp_fu_461_p3) > $signed(15'd727)) ? 1'b1 : 1'b0);

assign icmp_ln1039_fu_202_p2 = (($signed(grp_fu_461_p3) > $signed(15'd103)) ? 1'b1 : 1'b0);

assign icmp_ln249_fu_120_p2 = ((ap_sig_allocacmp_i_1 == 13'd4200) ? 1'b1 : 1'b0);

assign icmp_ln272_fu_157_p2 = ((sf_fu_76 == 32'd0) ? 1'b1 : 1'b0);

assign icmp_ln290_fu_177_p2 = ((sf_1_fu_171_p2 == 32'd300) ? 1'b1 : 1'b0);

assign inElem_fu_132_p1 = in0_V_TDATA[4:0];

assign out_V_TDATA = result_V_2_fu_446_p2;

assign result_V_2_fu_446_p2 = (add_ln840_13_fu_440_p2 + zext_ln840_4_fu_376_p1);

assign result_V_fu_193_p2 = (($signed(grp_fu_461_p3) > $signed(15'd33)) ? 1'b1 : 1'b0);

assign sf_1_fu_171_p2 = (sf_fu_76 + 32'd1);

assign zext_ln1039_10_fu_297_p1 = icmp_ln1039_10_fu_292_p2;

assign zext_ln1039_11_fu_306_p1 = icmp_ln1039_11_fu_301_p2;

assign zext_ln1039_12_fu_315_p1 = icmp_ln1039_12_fu_310_p2;

assign zext_ln1039_1_fu_216_p1 = icmp_ln1039_1_fu_211_p2;

assign zext_ln1039_2_fu_225_p1 = icmp_ln1039_2_fu_220_p2;

assign zext_ln1039_3_fu_234_p1 = icmp_ln1039_3_fu_229_p2;

assign zext_ln1039_4_fu_243_p1 = icmp_ln1039_4_fu_238_p2;

assign zext_ln1039_5_fu_252_p1 = icmp_ln1039_5_fu_247_p2;

assign zext_ln1039_6_fu_261_p1 = icmp_ln1039_6_fu_256_p2;

assign zext_ln1039_7_fu_270_p1 = icmp_ln1039_7_fu_265_p2;

assign zext_ln1039_8_fu_279_p1 = icmp_ln1039_8_fu_274_p2;

assign zext_ln1039_9_fu_288_p1 = icmp_ln1039_9_fu_283_p2;

assign zext_ln1039_fu_207_p1 = icmp_ln1039_fu_202_p2;

assign zext_ln215_fu_198_p1 = result_V_fu_193_p2;

assign zext_ln840_10_fu_436_p1 = add_ln840_12_fu_430_p2;

assign zext_ln840_1_fu_340_p1 = add_ln840_2_fu_334_p2;

assign zext_ln840_2_fu_350_p1 = add_ln840_3_fu_344_p2;

assign zext_ln840_3_fu_360_p1 = add_ln840_4_fu_354_p2;

assign zext_ln840_4_fu_376_p1 = add_ln840_6_fu_370_p2;

assign zext_ln840_5_fu_386_p1 = add_ln840_7_fu_380_p2;

assign zext_ln840_6_fu_396_p1 = add_ln840_8_fu_390_p2;

assign zext_ln840_7_fu_406_p1 = add_ln840_9_fu_400_p2;

assign zext_ln840_8_fu_416_p1 = add_ln840_10_fu_410_p2;

assign zext_ln840_9_fu_426_p1 = add_ln840_11_fu_420_p2;

assign zext_ln840_fu_324_p1 = icmp_ln1039_13_fu_319_p2;

endmodule //MVAU_hls_31_Matrix_Vector_Activate_Stream_Batch
