include: ci/.gitlab-setup.yml

stages:
  - sync
  - build
  - test

variables:
  PIPELINE_NAME:
    description: "Optional name to better identify this pipeline"
    value: ""
  TEST_SUITE:
    description: "Select test suite to run"
    value: "full_ci"
    options:
      - "none"
      - "quicktest_ci"
      - "full_ci"
  CPU_CORES:
    description: "Select number of CPU cores and test workers"
    value: "32"
  CPU_CORES_BENCH:
    description: "Select number of CPU cores for benchmark runs"
    value: "8"
  PARALLEL_JOBS:
    description: "Number of parallel Slurm array jobs per Benchmark job"
    value: "1"
  SLURM_TIMEOUT:
    description: "Select SLURM timeout"
    value: "1-0" # [days-hours]
  SLURM_PARTITION:
    description: "Slurm partition (e.g., normal, largemem, fpga, gpu)"
    value: "normal"
  SLURM_QOS:
    description: "Optional QoS option (include --qos, e.g., --qos express)"
    value: ""
  MANUAL_CFG_PATH:
    description: "Name (in ci/cfg/) or path (relative to LOCAL_CFG_DIR) of benchmarking config to run"
    value: ""

workflow:
  name: '$PIPELINE_NAME'
  rules:
    # Run pipeline for GitHub PRs to dev (does not support PRs from forks)
    - if: $CI_PIPELINE_SOURCE == "external_pull_request_event" && $CI_EXTERNAL_PULL_REQUEST_TARGET_BRANCH_NAME == "dev"
    # Run pipeline for pushes to dev or main
    - if: $CI_COMMIT_BRANCH == "dev" || $CI_COMMIT_BRANCH == "main"
    # Run pipeline if manually triggered via API or web GUI
    - if: $CI_PIPELINE_SOURCE == "api"
    - if: $CI_PIPELINE_SOURCE == "web"
    # Run pipeline if scheduled (only for nightly sync of finn-dev)
    - if: $CI_PIPELINE_SOURCE == "schedule"

Sync finn-dev:
  id_tokens:
    CI_JOB_JWT:
      aud: https://git.uni-paderborn.de
  stage: sync
  tags:
    # Run where full Docker + Singularity is available
    - image_build
  rules:
    # Only run on a schedule
    - if: $CI_PIPELINE_SOURCE == "schedule"
  script:
    - mkdir -p ../github_clone && cd ../github_clone
    - rm -rf finn-plus # Ensure we do a fresh clone (TODO: better way to handle this on job level?)
    - git clone git@github.com:eki-project/finn-plus.git && cd finn-plus
    - git remote add upstream https://github.com/Xilinx/finn.git
    - git checkout finn-dev
    - git pull upstream dev
    - git push origin finn-dev

Build:
  id_tokens:
    CI_JOB_JWT:
      aud: https://git.uni-paderborn.de
  stage: build
  tags:
    - login
  rules:
    # Do not run on a schedule
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    # Otherwise run
    - when: always
  before_script:
    - !reference [.n2_setup_general, before_script]
    - !reference [.n2_setup_xilinx_2022_2, before_script]
    # Install current version of Poetry
    - python3 -m venv poetry-install
    - poetry-install/bin/pip install poetry
    - shopt -s expand_aliases
    - alias poetry=poetry-install/bin/poetry
  script:
    # Let Poetry create virtual environment (.venv) and install Python dependencies
    # TODO: is it possible to cache the entire venv for the following jobs?
    - poetry install
    # Build .whl
    - poetry build --clean --format=wheel
    # Let FINN download additional dependencies, cache resulting deps directory
    - |
      source .venv/bin/activate
      finn deps update --path ./deps
  artifacts:
    name: "finn-plus_package"
    paths:
      - dist/*.whl
  cache:
    key: $CI_COMMIT_SHA #TODO: cache based on relevant files
    paths:
      - deps

FINN Test Suite 2022.2:
  id_tokens:
    CI_JOB_JWT:
      aud: https://git.uni-paderborn.de
  stage: test
  rules:
    # Do not run on a schedule
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    # Do not run if test suite has been deselected
    - if: $TEST_SUITE == "none"
      when: never
    # Do not run for PRs to dev (run only for pushes)
    - if: $CI_PIPELINE_SOURCE == "external_pull_request_event" && $CI_EXTERNAL_PULL_REQUEST_TARGET_BRANCH_NAME == "dev"
      when: never
    # Always run, as long as there was no prior failure
    - when: on_success
  cache:
    key: $CI_COMMIT_SHA
    policy: pull
    paths:
      - deps
  variables:
    GIT_STRATEGY: empty # Do not pull repository, install from wheel (artifact) instead
    SCHEDULER_PARAMETERS: "-A $PROJECT_ACCOUNT -p $SLURM_PARTITION -t $SLURM_TIMEOUT $SLURM_QOS --nodes 1 --ntasks 1 --cpus-per-task $CPU_CORES --exclusive"
    PYTEST_PARALLEL: "$CPU_CORES"
  extends: .setup_full_2022_2
  script:
    # Launch additional monitoring
    - $JOB_MONITORING_DIR/monitor.sh $JOB_MONITORING_DIR/$CI_PIPELINE_ID/$HOSTNAME.log &
    # Launch FINN via test command, includes preparation of (cached) dependencies
    - |
      source finn-plus-venv/bin/activate
      finn test --variant $TEST_SUITE --dependency-path ./deps --build-path $FINN_BUILD_DIR --num-workers 1 --num-test-workers $PYTEST_PARALLEL
  artifacts:
    name: "test_reports"
    when: always
    paths:
      - reports/
    reports:
      junit: reports/*.xml

FINN Test Suite 2024.2:
  extends:
    - FINN Test Suite 2022.2
    - .setup_full_2024_2
  rules:
    # Do not run on a schedule
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    # Do not run if test suite has been deselected
    - if: $TEST_SUITE == "none"
      when: never
    # Always run, as long as there was no prior failure
    - when: on_success

Bench (Manual):
  stage: test
  rules:
    # Do not run on a schedule
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - if: $MANUAL_CFG_PATH != ""
  trigger:
    include: ci/.gitlab-bench.yml
    strategy: depend
    forward:
      pipeline_variables: true
  variables:
    PARENT_PIPELINE_ID: $CI_PIPELINE_ID
    BENCH_CFG: "manual"

Bench (Basic):
  stage: test
  rules:
    # Do not run on a schedule
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - if: $MANUAL_CFG_PATH == ""
  trigger:
    include: ci/.gitlab-bench.yml
    strategy: depend
    forward:
      pipeline_variables: true
  variables:
    PARENT_PIPELINE_ID: $CI_PIPELINE_ID
  parallel:
    matrix:
      - BENCH_CFG: [regression_basic]

Bench (Extended):
  stage: test
  rules:
    # Do not run on a schedule
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    # Do not run for PRs to dev (run only for pushes)
    - if: $CI_PIPELINE_SOURCE == "external_pull_request_event" && $CI_EXTERNAL_PULL_REQUEST_TARGET_BRANCH_NAME == "dev"
      when: never
    - if: $MANUAL_CFG_PATH == ""
  trigger:
    include: ci/.gitlab-bench.yml
    strategy: depend
    forward:
      pipeline_variables: true
  variables:
    PARENT_PIPELINE_ID: $CI_PIPELINE_ID
    PARALLEL_JOBS: "4"
  parallel:
    matrix:
      - BENCH_CFG: [regression_extended, microbenchmark_basic]
